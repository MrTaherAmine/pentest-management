<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Jobs;

use App\Project;
use Carbon\Carbon;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

/**
 * Class updateHttpDataForDomainsWOStatusCode
 * @package App\Jobs
 */
class updateHttpDataForDomainsWOStatusCode implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;
    /**
     * @var int
     */
    public $timeout = 60;
    /**
     * @var int
     */
    public $tries = 1;
    /**
     * @var \App\Target
     */
    protected $targets;

    /**
     * Create a new job instance.
     *
     * @return void
     */
    public function __construct(Project $project)
    {
        $this->targets = $project->targets()->where('http_status', 0)->get();
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {
        foreach ($this->targets as $target) {
            FetchHttpDataForHost::dispatch($target)->onQueue('low');

            /**
             * Why is this here? Because we want to mark targets as fast as possible, so they dont get every time into
             * queue, when process takes too long (slow servers, bad timeouts, ...)
             */
            $target->autoFetchedHttpData_at = Carbon::now();
            $target->save();
        }
    }
}
