<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Console\Commands;

use App\AdminNotice;
use App\Project;
use App\Task\BatchProcessValidSubdomains;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Symfony\Component\Process\Process;

class Sublister extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'sublister:scan {--project=0 : Project ID in system} {--domain=0 : Domain to scan} {--threads=12 : Threads to use}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Scan a domain for new subdomains using Sublist3r.';

    /**
     * @var
     */
    protected $project;

    /**
     * @var string
     */
    protected $cmd = "";

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        list($projectId, $threads, $domain) = $this->getArguments();

        $this->validateArguments($projectId, $threads, $domain);

        $this->project = Project::findOrFail($projectId);

        $outputPath = $this->makeOutputFileAndPath($domain, $projectId);

        $this->cmd = $this->createCommand($domain, $threads, $outputPath);

        $this->line($this->cmd);

        AdminNotice::create([
            'type'    => 'success',
            'context' => "sublister:scan",
            'message' => "Execution started",
            'cmd'     => $this->cmd,
        ]);

        $this->executeCommand($this->cmd);

        $this->checkIfReportWasCreated($outputPath);

        $subdomains = File::get($outputPath);

        $this->importSubdomainsToDatabase($subdomains);

        $message = "Process finished, report saved to file and database.";

        $this->info($message);

        AdminNotice::create([
            'type'    => 'success',
            'context' => "sublister:scan",
            'message' => $message,
            'cmd'     => $this->cmd,
        ]);

    }

    /**
     * @return array
     */
    protected function getArguments(): array
    {
        $projectId = $this->option("project");
        $threads = $this->option("threads");
        $domain = $this->option("domain");

        return [$projectId, $threads, $domain];
    }

    /**
     * @param $projectId
     * @param $threads
     * @param $domain
     */
    protected function validateArguments($projectId, $threads, $domain): void
    {

        $abort = false;
        $message = "";

        if ($projectId <= 0) {
            $abort = true;
            $message = "projectId has to be bigger than 0";
        }

        if ($threads <= 0) {
            $abort = true;
            $message = "threads has to be bigger than 0";
        }


        if (strlen($domain) < 4) {
            $abort = true;
            $message = "domain not set or too small";
        }

        if ($abort) {

            $this->error($message);

            AdminNotice::create([
                'type'    => 'error',
                'context' => "sublister:scan",
                'message' => $message,
                'cmd'     => $this->cmd,
            ]);

            exit();
        }
    }

    /**
     * @param $domain
     * @param $projectId
     *
     * @return string
     */
    protected function makeOutputFileAndPath($domain, $projectId): string
    {
        $outputFile = str_slug($domain) . "-" . $projectId . ".json";
        $outputPath = storage_path("app/public/sublister/" . $outputFile);

        return $outputPath;
    }

    /**
     * @param $domain
     * @param $threads
     * @param $outputPath
     *
     * @return array|string
     */
    protected function createCommand($domain, $threads, $outputPath)
    {
        $cmd = [];

        $cmd[] = config('toolset.bin.python3');
        $cmd[] = config("toolset.path.sublister");
        $cmd[] = "-d " . $domain;
        $cmd[] = "-t " . $threads;
        $cmd[] = "-o " . $outputPath;

        $cmd = implode(" ", $cmd);

        return $cmd;
    }

    /**
     * @param $cmd
     */
    protected function executeCommand($cmd): void
    {
        $process = new Process($cmd);

        $process->setTimeout(
            config("toolset.sublister.timeout")
        );

        $process->start();

        $process->wait(function ($type, $buffer) {
            if (Process::ERR === $type) {
                $this->error($buffer);
            } else {
                $this->line($buffer);
            }
        });
    }

    /**
     * @param $outputPath
     */
    protected function checkIfReportWasCreated($outputPath): void
    {
        if (!File::exists($outputPath)) {
            $message = "Failed importing report... no report found";
            $this->warn($message);

            AdminNotice::create([
                'type'    => 'warning',
                'context' => "sublister:scan",
                'message' => $message,
                'cmd'     => $this->cmd,
            ]);

            exit();
        }
    }

    /**
     * @param $subdomains
     */
    protected function importSubdomainsToDatabase($subdomains): void
    {
        $domainAdder = new BatchProcessValidSubdomains();
        $domainAdder->setProject($this->project);
        $domainAdder->start($subdomains);
    }
}
