<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Console\Commands;

use App\AdminNotice;
use App\Target;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Symfony\Component\Process\Process;

/**
 * Class wpscan
 * @package App\Console\Commands
 */
class wpscan extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'wpscan:scan
        {--target=0 : Target ID in database} 
        {--url=-1 : Target URL}
        {--threads=4 : Max threads to use} 
        {--ustart=1 : User ID to start to enumerate}
        {--uend=20 : User ID to end to enumerate}
        {--plugins=p : Plugin enumeration type}
        {--themes=t : Theme enumeration type}
        {--random-agent : Use random us for requests}
    ';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Start a scan on the target.';

    /**
     * @var \App\Target
     */
    protected $target;

    /**
     * @var string
     */
    protected $cmd = "";

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();

    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {

        list($targetId, $targetUrl, $threads, $uidstart, $uidend, $plugins, $themes, $randomagent) = $this->getArguments();

        $this->validateArguments($targetId, $targetUrl, $threads, $uidstart, $uidend, $plugins, $themes);

        $this->target = Target::findOrFail($targetId);

        list($outputFile, $outputPath) = $this->makeOutputFileAndPath($targetUrl, $targetId);

        $this->cmd = $this->createCommand(
            $targetUrl,
            $threads,
            $uidstart,
            $uidend,
            $plugins,
            $themes,
            $randomagent,
            $outputPath
        );

        $this->removeOldReport($outputPath);

        $this->line($this->cmd);

        AdminNotice::create([
            'type'    => 'success',
            'context' => "wpscan:scan",
            'message' => "Execution started",
            'cmd'     => $this->cmd,
        ]);

        $this->updateWpscan();

        $this->executeCmd($this->cmd);

        $this->checkIfReportWasCreated($outputPath);

        $this->saveReportToDb($outputFile, $outputPath);

        $message = "Process finished, report saved to file and database.";

        $this->info($message);

        AdminNotice::create([
            'type'    => 'success',
            'context' => "wpscan:scan",
            'message' => $message,
            'cmd'     => $this->cmd,
        ]);

    }

    /**
     * @return array
     */
    protected function getArguments(): array
    {
        $targetId = $this->option('target');
        $targetUrl = $this->option('url');
        $threads = $this->option('threads');
        $uidstart = $this->option('ustart');
        $uidend = $this->option('uend');
        $plugins = $this->option('plugins');
        $themes = $this->option('themes');
        $randomagent = $this->option('random-agent');

        return [
            $targetId,
            $targetUrl,
            $threads,
            $uidstart,
            $uidend,
            $plugins,
            $themes,
            $randomagent,
        ];
    }


    protected function validateArguments(
        int $targetId,
        string $targetUrl,
        int $threads,
        int $uidstart,
        int $uidend,
        string $plugins,
        string $themes
    ) {
        $message = "";
        $abort = false;

        if ($targetUrl == "" || $targetUrl < 0) {
            $abort = true;
            $message = "TargetURL not set!";
        }
        if ($targetId <= 0) {
            $abort = true;
            $message = "targetID has to be bigger than 0";
        }

        if ($threads <= 0) {
            $abort = true;
            $message = "threads has to be bigger than 0";
        }

        if ($uidstart <= 0) {
            $abort = true;
            $message = "uidstart has to be bigger than 0";
        }

        if ($uidend <= 0) {
            $abort = true;
            $message = "uidend has to be bigger than 0";
        }

        if (!in_array($plugins, ["p", "ap", "vp"])) {
            $abort = true;
            $message = "plugins invalid";
        }

        if (!in_array($themes, ["t", "at", "vt"])) {
            $abort = true;
            $message = "themes invalid";
        }


        if ($abort) {
            $this->error($message);

            AdminNotice::create([
                'type'    => 'error',
                'context' => "wpscan:scan",
                'message' => $message,
                'cmd'     => $this->cmd,
            ]);

            exit();

        }

    }

    /**
     * @param string $targetUrl
     * @param int    $targetId
     *
     * @return array
     */
    protected function makeOutputFileAndPath(string $targetUrl, int $targetId): array
    {
        $outputFile = str_slug($targetUrl) . "-" . $targetId . ".txt";
        $outputPath = storage_path("app/public/wpscan/" . $outputFile);

        return [$outputFile, $outputPath];
    }


    protected function createCommand(
        string $targetUrl,
        int $threads,
        int $uidstart,
        int $uidend,
        string $plugins,
        string $themes,
        bool $randomagent,
        string $outputPath
    ): string {
        $cmd = [];

        $cmd[] = config('toolset.bin.ruby2');
        $cmd[] = config("toolset.path.wpscan");

        $cmd[] = "-u " . $targetUrl;
        $cmd[] = "-e u[" . $uidstart . "," . $uidend . "]," . $plugins . "," . $themes;
        $cmd[] = "-t " . $threads;
        $cmd[] = "--log " . $outputPath;

        if ($randomagent) {
            $cmd[] = '-r';
        }

        $cmd[] = "--follow-redirection";
        $cmd[] = "--no-banner";
        $cmd[] = "--disable-tls-checks";
        $cmd[] = "--request-timeout 4";
        $cmd[] = "--connect-timeout 4";

        $finaleCommand = implode(" ", $cmd);

        return $finaleCommand;
    }

    /**
     * @param $outputPath
     */
    protected function removeOldReport($outputPath): void
    {
        if (File::exists($outputPath)) {
            File::delete($outputPath);
        }
    }

    /**
     *
     */
    protected function updateWpscan(): void
    {
        $cmd = [];
        $cmd[] = config('toolset.bin.ruby2');
        $cmd[] = config("toolset.path.wpscan");
        $cmd[] = "--update";
        $cmd[] = "--no-banner";

        $process = new Process(implode(" ", $cmd));
        $process->setTimeout(
            config("toolset.wpscan.timeout")
        );
        $process->start();

        $process->wait(function ($type, $buffer) {
            if (Process::ERR === $type) {
                $this->error($buffer);
            } else {
                $this->line($buffer);
            }
        });
    }

    /**
     * @param string $finaleCommand
     */
    protected function executeCmd(string $finaleCommand)
    {
        $process = new Process($finaleCommand);

        $process->setTimeout(
            config("toolset.wpscan.timeout")
        );

        $process->start();

        $process->wait(function ($type, $buffer) {
            if (Process::ERR === $type) {
                $this->error($buffer);
            } else {
                $this->line($buffer);
            }
        });
    }

    /**
     * @param string $outputPath
     */
    protected function checkIfReportWasCreated(string $outputPath): void
    {
        if (!File::exists($outputPath)) {

            $message = "Failed importing report... no report found";

            $this->warn($message);

            AdminNotice::create([
                'type'    => 'warning',
                'context' => "dirsearch:scan",
                'message' => $message,
                'cmd'     => $this->cmd,
            ]);

            exit();
        }
    }

    /**
     * @param $outputFile
     * @param $outputPath
     */
    protected function saveReportToDb($outputFile, $outputPath): void
    {
        $reportContent = "Full Report: " . asset("storage/wpscan/" . $outputFile) . "\n\n";
        $reportContent .= File::get($outputPath);

        $this->target->wpscan_report = $reportContent;
        $this->target->save();
    }

    /**
     *
     */
}
