<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */


namespace App\System;


use Symfony\Component\Process\Process;


/**
 * Class WildCardDomain
 * @package App\System
 */
class WildCardDomain
{
    /**
     * Teststring to make simple check if given domain is a wildcard domain. Its highly unlikely those subdomain really
     * exists on a domain.
     */
    const RANDSTR = [
        'fsLA6O9e7jbniWCFgz3G4xHx1D03s4nRaDPntdnR',
        '4xHx1D03s4nRaDPntdnRfsLA6O9e7jbniWCFgz3G',
        'm6NKD0lQx4oyCiEjRsPEtW3Ig28A0DTAKOUXsuDy',
        'tW3Ig28A0DTAKOUXsuDym6NKD0lQx4oyCiEjRsPE',
        'Db9KP2QNedKrCe4Qepo3fIf1ewo7ma9O2cPB058I',
        'fIf1ewo7ma9O2cPB058IDb9KP2QNedKrCe4Qepo3',
        'VKkkSejjgJLRkVemNOAF9s6tBQ3qRRGtuZGglIXV',
        '9s6tBQ3qRRGtuZGglIXVVKkkSejjgJLRkVemNOAF',
        'pZ9EFd0ll8GKdVq2mzS6xOFVQFXWW8crURLZ5mgm',
        'xOFVQFXWW8crURLZ5mgmpZ9EFd0ll8GKdVq2mzS6',
    ];
    /**
     * @var array
     */
    public $result = [];

    /**
     * @var string
     */
    private $domain;

    /**
     * WildCardDomain constructor.
     *
     * @param string $domain
     */
    public function __construct(string $domain)
    {
        $this->domain = $domain;
    }

    /**
     * Simple test - use ubuntus "dig" command to get the IP for a subdomain - if this results in the same output for
     * every test-subdomain, we have an indicator that this domain is a wildcard domain.
     */
    public function test(): void
    {
        foreach (self::RANDSTR as $subdomain) {
            $testDomain = $subdomain . "." . $this->domain;

            $process = new Process("dig +short " . $testDomain);
            $process->run();
            $output = trim($process->getOutput());

            if ($output != "") {
                $this->result[] = $output;
            }
        }

        $this->result = array_unique($this->result);


    }

    /**
     * @return bool
     */
    public function isWildcardDomain(): bool
    {
        if (count($this->result) == 1) {
            return true;
        }

        return false;
    }

    /**
     * This may be used for debugging!
     *
     * @return array
     */
    public function showResults(): array
    {
        return [
            'result'      => $this->result,
            'resultCount' => count($this->result),
        ];
    }


}