<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Project;
use App\System\FolderContent;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class ProjectController extends Controller
{

    const PAGINATE = 12;

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(): View
    {
        $subdomains_wordlists = new FolderContent("toolset/wordlists/subdomains");

        return view('admin.project.index', [
            'projects'             => Project::all(),
            'subdomains_wordlists' => $subdomains_wordlists->all(),
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(): View
    {
        return view('admin.project.create');
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\View\View
     */
    public function show(Request $request, Project $project): View
    {

        $targets = $project->activeTargets()
            ->withSearch(
                $request->input('search')
            )
            ->withSorting(
                $request->input('sort')
            )
            ->withFilter(
                $request->input('filter')
            )
            ->withStatus(
                $request->input('status')
            )
            ->paginate(self::PAGINATE);

        $filesdirs_wordlists = new FolderContent("toolset/wordlists/filesdirs");

        return view('admin.project.show', [
            'project'             => $project,
            'targets'             => $targets,
            'filesdirs_wordlists' => $filesdirs_wordlists->all(),
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\View\View
     */
    public function archived(Request $request, Project $project): View
    {
        $targets = $project->archivedTargets()
            ->withSearch(
                $request->input('search')
            )
            ->withSorting(
                $request->input('sort')
            )
            ->withFilter(
                $request->input('filter')
            )
            ->withStatus(
                $request->input('status')
            )
            ->paginate(self::PAGINATE);

        $filesdirs_wordlists = new FolderContent("toolset/wordlists/filesdirs");

        return view('admin.project.archived', [
            'project'             => $project,
            'targets'             => $targets,
            'filesdirs_wordlists' => $filesdirs_wordlists->all(),
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request): RedirectResponse
    {
        $this->validate($request, [
            'name' => 'required|string|unique:projects',
        ]);


        $project = Project::create([
            'name' => $request->input('name'),
        ]);

        return redirect()
            ->route('admin.project.show', ['project' => $project])
            ->with('status', 'Succesfully created project');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Project $project
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(Project $project): View
    {
        return view('admin.project.edit', [
            'project' => $project,
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  \App\Project             $project
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Project $project): RedirectResponse
    {
        $this->validate($request, [
            'name' => 'required|string|unique:projects,name,' . $project->id,
        ]);

        $project->name = $request->input('name');
        $project->save();

        return redirect()
            ->route('admin.project.show', ['project' => $project])
            ->with('status', 'Succesfully updated project');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Project $project
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, Project $project): JsonResponse
    {
        if ($project->id != $request->input('id')) {
            return response()->json(['status' => false]);
        }

        return response()->json(['status' => $project->delete()]);
    }

}
