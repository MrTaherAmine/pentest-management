<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Jobs\RunFilesDirScanOnTarget;
use App\Project;
use App\System\DNS;
use App\Target;
use App\Task\BatchProcessValidSubdomains;
use App\Task\GetDnsRecord;
use Carbon\Carbon;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class TargetController extends Controller
{
    const ALLOWED_FIELDS = [
        'open_ports',
        'note',
        'files_dirs_found',
        'http_response_header',
        'wpscan_report',
        'wascan_report',
    ];

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Project $project): View
    {
        return view('admin.target.create', [
            'siteTitle' => 'Create target',
            'project'   => $project,
        ]);
    }

    /**
     * @param \App\Project $project
     *
     * @return \Illuminate\View\View
     */
    public function import(Project $project): View
    {
        return view('admin.target.mass-import', [
            'siteTitle' => 'Import targets',
            'project'   => $project,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function startImport(Request $request, Project $project): RedirectResponse
    {
        $this->validate($request, [
            'subdomains' => 'required|string',
        ]);

        $domainAdder = new BatchProcessValidSubdomains();
        $domainAdder->setProject($project);
        $domainAdder->start($request->input('subdomains'));

        return redirect()
            ->route('admin.project.show', ['project' => $project])
            ->with('status',
                'Successfully imported subdomains - http data and dns data will be gathered through the systems queue manager!');
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request, Project $project): RedirectResponse
    {
        $this->validate($request, [
            'subdomain' => 'required|string|unique:targets',
            'status'    => 'required|string',
        ]);

        $host = parse_url($request->input('subdomain'));
        $host = $host['host'] ?? str_replace("/", "", $host['path']);

        $dns = new GetDnsRecord($host);

        Target::create(
            array_merge($request->all(), [
                'project_id'            => $project->id,
                'ip'                    => @$dns->ips()[0],
                'ip_list'               => @implode(", ", $dns->ips()),
                'cname'                 => $dns->cname(),
                'host'                  => $dns->host(),
                'autoFetchedDNSData_at' => Carbon::now(),
            ]));

        return redirect()
            ->route('admin.project.show', ['project' => $project])
            ->with('status', 'Succesfully created target');
    }

    /**
     * @param \App\Target $target
     *
     * @return \Illuminate\View\View
     */
    public function edit(Target $target): View
    {
        return view('admin.target.edit', [
            'siteTitle' => 'Edit target',
            'target'    => $target,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Target              $target
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update(Request $request, Target $target): RedirectResponse
    {

        $this->validate($request, [
            'subdomain'   => 'required|string|unique:targets,subdomain,' . $target->id,
            'status'      => 'required|string',
            'http_status' => 'integer|nullable',
        ]);

        $host = parse_url($request->input('subdomain'));
        $host = $host['host'] ?? str_replace("/", "", $host['path']);
        $dns = new GetDnsRecord($host);

        $target->subdomain = $request->input('subdomain');
        $target->host = $request->input('host');
        $target->status = $request->input('status');
        $target->http_status = $request->input('http_status');
        $target->final_redirect_url = $request->input('final_redirect_url');
        $target->http_response_header = $request->input('http_response_header');
        $target->open_ports = $request->input('open_ports');
        $target->files_dirs_found = $request->input('files_dirs_found');
        $target->wpscan_report = $request->input('wpscan_report');
        $target->wascan_report = $request->input('wascan_report');
        $target->note = $request->input('note');
        $target->ip = @$dns->ips()[0];
        $target->ip_list = @implode(", ", $dns->ips());
        $target->cname = $dns->cname();
        $target->host = $dns->host();
        $target->autoFetchedDNSData_at = Carbon::now();
        $target->save();


        return redirect()
            ->route('admin.target.edit', ['target' => $target])
            ->with('status', 'Succesfully updated target');
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Target              $target
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy(Request $request, Target $target): JsonResponse
    {
        return response()->json(['status' => $target->delete()]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Target              $target
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function archive(Request $request, Target $target): JsonResponse
    {

        if ($target->is_archived === 1) {
            $target->is_archived = 0;
        } else {
            $target->is_archived = 1;
        }

        return response()->json(['status' => $target->save()]);
    }

    /**
     * Set a status for a target.
     *
     * @param \Illuminate\Http\Request $request
     * @param \App\Target              $target
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function changeStatus(Request $request, Target $target): JsonResponse
    {
        $target->status = $request->input('status_value');

        return response()->json(['status' => $target->save()]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Target              $target
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getField(Request $request, Target $target): JsonResponse
    {
        $field = $request->input('field');
        $field = trim(strtolower($field));

        if ($this->isInAllowedFields($field)) {
            return response()->json([
                'status' => true,
                'value'  => nl2br(htmlspecialchars($target->$field)),
            ]);
        }

        return response()->json(['status' => false]);
    }

    /**
     * @param string $field
     *
     * @return bool
     */
    private function isInAllowedFields(string $field): bool
    {
        if (in_array($field, self::ALLOWED_FIELDS)) {
            return true;
        }

        return false;
    }


}
