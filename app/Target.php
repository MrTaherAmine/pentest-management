<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App;

use Illuminate\Database\Eloquent\Model;

class Target extends Model
{
    protected $fillable = [
        'subdomain',
        'host',
        'status',
        'ip',
        'cname',
        'ip_list',
        'http_status',
        'final_redirect_url',
        'http_response_header',
        'open_ports',
        'files_dirs_found',
        'wpscan_report',
        'wascan_report',
        'note',
        'project_id',
        'is_archived',
        'autoFetchedHttpData_at',
        'autoFetchedDNSData_at',
    ];

    public function project()
    {
        return $this->belongsTo('App\Project');
    }

    public function scopeActive($query)
    {
        return $query->where('is_archived', 0);
    }

    public function scopeChecked($query)
    {
        return $query->where('is_archived', 0)->where('status', 'checked');
    }

    public function scopeArchived($query)
    {
        return $query->where('is_archived', 1);
    }

    public function scopeWithFilter($query, $filter)
    {
        switch ($filter) {
            case 'ip-cname':
                return $query->whereNotNull('ip')->whereNotNull('cname');
            case 'ip':
                return $query->whereNotNull('ip');
            case 'no-ip-no-cname':
                return $query->whereNull('ip')->orWhereNull('cname');
            case 'new':
                return $query->where('status', 'new');
            case 'checked':
                return $query->where('status', 'checked');
            case 'checking':
                return $query->where('status', 'checking');
            case 'unknown':
                return $query->where('status', 'unknown');
        }

        return $query;
    }


    public function scopeWithSorting($query, $sort)
    {

        switch ($sort) {
            case 'create-asc':
                return $query->orderBy('created_at');

            case 'updated-asc':
                return $query->orderBy('updated_at');

            case 'updated-desc':
                return $query->orderBy('updated_at', 'desc');

            case 'subdomain-asc':
                return $query->orderBy('subdomain');

            case 'subdomain-desc':
                return $query->orderBy('subdomain', 'desc');
        }

        return $query->orderBy('created_at', 'desc');

    }

    public function scopeWithSearch($query, $search)
    {
        $search = trim($search);

        if ($search == '') {
            return $query;
        }

        return $query->where('subdomain', 'like', $search . '%')
            ->orWhere('subdomain', 'like', '%' . $search . '%')
            ->orWhere('cname', 'like', $search . '%')
            ->orWhere('cname', 'like', '%' . $search . '%')
            ->orWhere('host', 'like', $search . '%')
            ->orWhere('host', 'like', '%' . $search . '%');
    }

    public function scopeWithStatus($query, $statustype)
    {
        switch ($statustype) {
            case '0-200':
                return $query->where('http_status', ">", 0)->where('http_status', "<=", 200);
            case '200-300':
                return $query->where('http_status', ">", 200)->where('http_status', "<=", 300);
            case '300-400':
                return $query->where('http_status', ">", 300)->where('http_status', "<=", 400);
            case '400-500':
                return $query->where('http_status', ">", 400)->where('http_status', "<", 500);
            case '500':
                return $query->where('http_status', '>=', 500);
            case 'na':
                return $query->where('http_status', 0)->orWhereNull('http_status');
        }

        return $query;
    }
}
